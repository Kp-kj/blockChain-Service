// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: block.proto

package block

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Block_Ping_FullMethodName                       = "/block.Block/Ping"
	Block_CreateCryptominer_FullMethodName          = "/block.Block/CreateCryptominer"
	Block_CreateProp_FullMethodName                 = "/block.Block/CreateProp"
	Block_CreateActivity_FullMethodName             = "/block.Block/CreateActivity"
	Block_GetGoodsList_FullMethodName               = "/block.Block/GetGoodsList"
	Block_JudgeBargain_FullMethodName               = "/block.Block/JudgeBargain"
	Block_CryptominerFullPurchase_FullMethodName    = "/block.Block/CryptominerFullPurchase"
	Block_CryptominerBargainPurchase_FullMethodName = "/block.Block/CryptominerBargainPurchase"
	Block_PropPurchase_FullMethodName               = "/block.Block/PropPurchase"
	Block_GetBargainRule_FullMethodName             = "/block.Block/GetBargainRule"
	Block_GetBargainCryptominer_FullMethodName      = "/block.Block/GetBargainCryptominer"
	Block_GetBargainProgress_FullMethodName         = "/block.Block/GetBargainProgress"
	Block_GetPurchaseRecord_FullMethodName          = "/block.Block/GetPurchaseRecord"
	Block_JudgeGoodsPurchase_FullMethodName         = "/block.Block/JudgeGoodsPurchase"
)

// BlockClient is the client API for Block service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	CreateCryptominer(ctx context.Context, in *CreateCryptominerRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error)
	CreateProp(ctx context.Context, in *CreatePropRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error)
	CreateActivity(ctx context.Context, in *CreateActivityRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error)
	GetGoodsList(ctx context.Context, in *GetGoodsListRequest, opts ...grpc.CallOption) (*GetGoodsListResponse, error)
	JudgeBargain(ctx context.Context, in *JudgeBargainRequest, opts ...grpc.CallOption) (*JudgeBargainResponse, error)
	CryptominerFullPurchase(ctx context.Context, in *CryptominerPurchaseRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error)
	CryptominerBargainPurchase(ctx context.Context, in *CryptominerBargainRequest, opts ...grpc.CallOption) (*CryptominerBargainResponse, error)
	PropPurchase(ctx context.Context, in *PropPurchaseRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error)
	GetBargainRule(ctx context.Context, in *GetBargainRuleRequest, opts ...grpc.CallOption) (*GetBargainRuleResponse, error)
	GetBargainCryptominer(ctx context.Context, in *GetBargainCryptominerRequest, opts ...grpc.CallOption) (*GetBargainCryptominerResponse, error)
	GetBargainProgress(ctx context.Context, in *GetBargainProgressRequest, opts ...grpc.CallOption) (*GetBargainProgressResponse, error)
	GetPurchaseRecord(ctx context.Context, in *GetPurchaseRecordRequest, opts ...grpc.CallOption) (*GetPurchaseRecordResponse, error)
	JudgeGoodsPurchase(ctx context.Context, in *JudgeGoodsPurchaseRequest, opts ...grpc.CallOption) (*JudgeGoodsPurchaseResponse, error)
}

type blockClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockClient(cc grpc.ClientConnInterface) BlockClient {
	return &blockClient{cc}
}

func (c *blockClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Block_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockClient) CreateCryptominer(ctx context.Context, in *CreateCryptominerRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error) {
	out := new(IsSuccessResponse)
	err := c.cc.Invoke(ctx, Block_CreateCryptominer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockClient) CreateProp(ctx context.Context, in *CreatePropRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error) {
	out := new(IsSuccessResponse)
	err := c.cc.Invoke(ctx, Block_CreateProp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockClient) CreateActivity(ctx context.Context, in *CreateActivityRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error) {
	out := new(IsSuccessResponse)
	err := c.cc.Invoke(ctx, Block_CreateActivity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockClient) GetGoodsList(ctx context.Context, in *GetGoodsListRequest, opts ...grpc.CallOption) (*GetGoodsListResponse, error) {
	out := new(GetGoodsListResponse)
	err := c.cc.Invoke(ctx, Block_GetGoodsList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockClient) JudgeBargain(ctx context.Context, in *JudgeBargainRequest, opts ...grpc.CallOption) (*JudgeBargainResponse, error) {
	out := new(JudgeBargainResponse)
	err := c.cc.Invoke(ctx, Block_JudgeBargain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockClient) CryptominerFullPurchase(ctx context.Context, in *CryptominerPurchaseRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error) {
	out := new(IsSuccessResponse)
	err := c.cc.Invoke(ctx, Block_CryptominerFullPurchase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockClient) CryptominerBargainPurchase(ctx context.Context, in *CryptominerBargainRequest, opts ...grpc.CallOption) (*CryptominerBargainResponse, error) {
	out := new(CryptominerBargainResponse)
	err := c.cc.Invoke(ctx, Block_CryptominerBargainPurchase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockClient) PropPurchase(ctx context.Context, in *PropPurchaseRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error) {
	out := new(IsSuccessResponse)
	err := c.cc.Invoke(ctx, Block_PropPurchase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockClient) GetBargainRule(ctx context.Context, in *GetBargainRuleRequest, opts ...grpc.CallOption) (*GetBargainRuleResponse, error) {
	out := new(GetBargainRuleResponse)
	err := c.cc.Invoke(ctx, Block_GetBargainRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockClient) GetBargainCryptominer(ctx context.Context, in *GetBargainCryptominerRequest, opts ...grpc.CallOption) (*GetBargainCryptominerResponse, error) {
	out := new(GetBargainCryptominerResponse)
	err := c.cc.Invoke(ctx, Block_GetBargainCryptominer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockClient) GetBargainProgress(ctx context.Context, in *GetBargainProgressRequest, opts ...grpc.CallOption) (*GetBargainProgressResponse, error) {
	out := new(GetBargainProgressResponse)
	err := c.cc.Invoke(ctx, Block_GetBargainProgress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockClient) GetPurchaseRecord(ctx context.Context, in *GetPurchaseRecordRequest, opts ...grpc.CallOption) (*GetPurchaseRecordResponse, error) {
	out := new(GetPurchaseRecordResponse)
	err := c.cc.Invoke(ctx, Block_GetPurchaseRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockClient) JudgeGoodsPurchase(ctx context.Context, in *JudgeGoodsPurchaseRequest, opts ...grpc.CallOption) (*JudgeGoodsPurchaseResponse, error) {
	out := new(JudgeGoodsPurchaseResponse)
	err := c.cc.Invoke(ctx, Block_JudgeGoodsPurchase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockServer is the server API for Block service.
// All implementations must embed UnimplementedBlockServer
// for forward compatibility
type BlockServer interface {
	Ping(context.Context, *Request) (*Response, error)
	CreateCryptominer(context.Context, *CreateCryptominerRequest) (*IsSuccessResponse, error)
	CreateProp(context.Context, *CreatePropRequest) (*IsSuccessResponse, error)
	CreateActivity(context.Context, *CreateActivityRequest) (*IsSuccessResponse, error)
	GetGoodsList(context.Context, *GetGoodsListRequest) (*GetGoodsListResponse, error)
	JudgeBargain(context.Context, *JudgeBargainRequest) (*JudgeBargainResponse, error)
	CryptominerFullPurchase(context.Context, *CryptominerPurchaseRequest) (*IsSuccessResponse, error)
	CryptominerBargainPurchase(context.Context, *CryptominerBargainRequest) (*CryptominerBargainResponse, error)
	PropPurchase(context.Context, *PropPurchaseRequest) (*IsSuccessResponse, error)
	GetBargainRule(context.Context, *GetBargainRuleRequest) (*GetBargainRuleResponse, error)
	GetBargainCryptominer(context.Context, *GetBargainCryptominerRequest) (*GetBargainCryptominerResponse, error)
	GetBargainProgress(context.Context, *GetBargainProgressRequest) (*GetBargainProgressResponse, error)
	GetPurchaseRecord(context.Context, *GetPurchaseRecordRequest) (*GetPurchaseRecordResponse, error)
	JudgeGoodsPurchase(context.Context, *JudgeGoodsPurchaseRequest) (*JudgeGoodsPurchaseResponse, error)
	mustEmbedUnimplementedBlockServer()
}

// UnimplementedBlockServer must be embedded to have forward compatible implementations.
type UnimplementedBlockServer struct {
}

func (UnimplementedBlockServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedBlockServer) CreateCryptominer(context.Context, *CreateCryptominerRequest) (*IsSuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCryptominer not implemented")
}
func (UnimplementedBlockServer) CreateProp(context.Context, *CreatePropRequest) (*IsSuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProp not implemented")
}
func (UnimplementedBlockServer) CreateActivity(context.Context, *CreateActivityRequest) (*IsSuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateActivity not implemented")
}
func (UnimplementedBlockServer) GetGoodsList(context.Context, *GetGoodsListRequest) (*GetGoodsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodsList not implemented")
}
func (UnimplementedBlockServer) JudgeBargain(context.Context, *JudgeBargainRequest) (*JudgeBargainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JudgeBargain not implemented")
}
func (UnimplementedBlockServer) CryptominerFullPurchase(context.Context, *CryptominerPurchaseRequest) (*IsSuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CryptominerFullPurchase not implemented")
}
func (UnimplementedBlockServer) CryptominerBargainPurchase(context.Context, *CryptominerBargainRequest) (*CryptominerBargainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CryptominerBargainPurchase not implemented")
}
func (UnimplementedBlockServer) PropPurchase(context.Context, *PropPurchaseRequest) (*IsSuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PropPurchase not implemented")
}
func (UnimplementedBlockServer) GetBargainRule(context.Context, *GetBargainRuleRequest) (*GetBargainRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBargainRule not implemented")
}
func (UnimplementedBlockServer) GetBargainCryptominer(context.Context, *GetBargainCryptominerRequest) (*GetBargainCryptominerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBargainCryptominer not implemented")
}
func (UnimplementedBlockServer) GetBargainProgress(context.Context, *GetBargainProgressRequest) (*GetBargainProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBargainProgress not implemented")
}
func (UnimplementedBlockServer) GetPurchaseRecord(context.Context, *GetPurchaseRecordRequest) (*GetPurchaseRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPurchaseRecord not implemented")
}
func (UnimplementedBlockServer) JudgeGoodsPurchase(context.Context, *JudgeGoodsPurchaseRequest) (*JudgeGoodsPurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JudgeGoodsPurchase not implemented")
}
func (UnimplementedBlockServer) mustEmbedUnimplementedBlockServer() {}

// UnsafeBlockServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockServer will
// result in compilation errors.
type UnsafeBlockServer interface {
	mustEmbedUnimplementedBlockServer()
}

func RegisterBlockServer(s grpc.ServiceRegistrar, srv BlockServer) {
	s.RegisterService(&Block_ServiceDesc, srv)
}

func _Block_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Block_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Block_CreateCryptominer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCryptominerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).CreateCryptominer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Block_CreateCryptominer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).CreateCryptominer(ctx, req.(*CreateCryptominerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Block_CreateProp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).CreateProp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Block_CreateProp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).CreateProp(ctx, req.(*CreatePropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Block_CreateActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).CreateActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Block_CreateActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).CreateActivity(ctx, req.(*CreateActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Block_GetGoodsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).GetGoodsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Block_GetGoodsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).GetGoodsList(ctx, req.(*GetGoodsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Block_JudgeBargain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JudgeBargainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).JudgeBargain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Block_JudgeBargain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).JudgeBargain(ctx, req.(*JudgeBargainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Block_CryptominerFullPurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptominerPurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).CryptominerFullPurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Block_CryptominerFullPurchase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).CryptominerFullPurchase(ctx, req.(*CryptominerPurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Block_CryptominerBargainPurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptominerBargainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).CryptominerBargainPurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Block_CryptominerBargainPurchase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).CryptominerBargainPurchase(ctx, req.(*CryptominerBargainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Block_PropPurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropPurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).PropPurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Block_PropPurchase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).PropPurchase(ctx, req.(*PropPurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Block_GetBargainRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBargainRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).GetBargainRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Block_GetBargainRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).GetBargainRule(ctx, req.(*GetBargainRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Block_GetBargainCryptominer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBargainCryptominerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).GetBargainCryptominer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Block_GetBargainCryptominer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).GetBargainCryptominer(ctx, req.(*GetBargainCryptominerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Block_GetBargainProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBargainProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).GetBargainProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Block_GetBargainProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).GetBargainProgress(ctx, req.(*GetBargainProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Block_GetPurchaseRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPurchaseRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).GetPurchaseRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Block_GetPurchaseRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).GetPurchaseRecord(ctx, req.(*GetPurchaseRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Block_JudgeGoodsPurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JudgeGoodsPurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).JudgeGoodsPurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Block_JudgeGoodsPurchase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).JudgeGoodsPurchase(ctx, req.(*JudgeGoodsPurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Block_ServiceDesc is the grpc.ServiceDesc for Block service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Block_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "block.Block",
	HandlerType: (*BlockServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Block_Ping_Handler,
		},
		{
			MethodName: "CreateCryptominer",
			Handler:    _Block_CreateCryptominer_Handler,
		},
		{
			MethodName: "CreateProp",
			Handler:    _Block_CreateProp_Handler,
		},
		{
			MethodName: "CreateActivity",
			Handler:    _Block_CreateActivity_Handler,
		},
		{
			MethodName: "GetGoodsList",
			Handler:    _Block_GetGoodsList_Handler,
		},
		{
			MethodName: "JudgeBargain",
			Handler:    _Block_JudgeBargain_Handler,
		},
		{
			MethodName: "CryptominerFullPurchase",
			Handler:    _Block_CryptominerFullPurchase_Handler,
		},
		{
			MethodName: "CryptominerBargainPurchase",
			Handler:    _Block_CryptominerBargainPurchase_Handler,
		},
		{
			MethodName: "PropPurchase",
			Handler:    _Block_PropPurchase_Handler,
		},
		{
			MethodName: "GetBargainRule",
			Handler:    _Block_GetBargainRule_Handler,
		},
		{
			MethodName: "GetBargainCryptominer",
			Handler:    _Block_GetBargainCryptominer_Handler,
		},
		{
			MethodName: "GetBargainProgress",
			Handler:    _Block_GetBargainProgress_Handler,
		},
		{
			MethodName: "GetPurchaseRecord",
			Handler:    _Block_GetPurchaseRecord_Handler,
		},
		{
			MethodName: "JudgeGoodsPurchase",
			Handler:    _Block_JudgeGoodsPurchase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "block.proto",
}
