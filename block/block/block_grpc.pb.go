// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: block.proto

package block

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Block_Ping_FullMethodName                       = "/block.Block/Ping"
	Block_CreateCryptominer_FullMethodName          = "/block.Block/CreateCryptominer"
	Block_CreateProp_FullMethodName                 = "/block.Block/CreateProp"
	Block_AdminGoodList_FullMethodName              = "/block.Block/AdminGoodList"
	Block_StartGood_FullMethodName                  = "/block.Block/StartGood"
	Block_CreateActivity_FullMethodName             = "/block.Block/CreateActivity"
	Block_AdminActivityList_FullMethodName          = "/block.Block/AdminActivityList"
	Block_StartActivity_FullMethodName              = "/block.Block/StartActivity"
	Block_GetGoodsList_FullMethodName               = "/block.Block/GetGoodsList"
	Block_GetPurchaseRecord_FullMethodName          = "/block.Block/GetPurchaseRecord"
	Block_JudgeBargain_FullMethodName               = "/block.Block/JudgeBargain"
	Block_CryptominerFullPurchase_FullMethodName    = "/block.Block/CryptominerFullPurchase"
	Block_PropPurchase_FullMethodName               = "/block.Block/PropPurchase"
	Block_CryptominerBargainPurchase_FullMethodName = "/block.Block/CryptominerBargainPurchase"
	Block_AssistorBargain_FullMethodName            = "/block.Block/AssistorBargain"
	Block_GetBargainRecord_FullMethodName           = "/block.Block/GetBargainRecord"
	Block_BargainPay_FullMethodName                 = "/block.Block/BargainPay"
	Block_JudgeGoodsPurchase_FullMethodName         = "/block.Block/JudgeGoodsPurchase"
	Block_GetUserCryptominerStatus_FullMethodName   = "/block.Block/GetUserCryptominerStatus"
	Block_GetUserPropStatus_FullMethodName          = "/block.Block/GetUserPropStatus"
	Block_ActivateCryptominer_FullMethodName        = "/block.Block/ActivateCryptominer"
)

// BlockClient is the client API for Block service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockClient interface {
	// 管理后台接口
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	CreateCryptominer(ctx context.Context, in *CreateCryptominerRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error)
	CreateProp(ctx context.Context, in *CreatePropRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error)
	AdminGoodList(ctx context.Context, in *AdminGoodListRequest, opts ...grpc.CallOption) (*AdminGoodListResponse, error)
	StartGood(ctx context.Context, in *StartGoodRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error)
	CreateActivity(ctx context.Context, in *CreateActivityRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error)
	AdminActivityList(ctx context.Context, in *AdminActivityListRequest, opts ...grpc.CallOption) (*AdminActivityListResponse, error)
	StartActivity(ctx context.Context, in *StartActivityRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error)
	// PC接口
	GetGoodsList(ctx context.Context, in *GetGoodsListRequest, opts ...grpc.CallOption) (*GetGoodsListResponse, error)
	GetPurchaseRecord(ctx context.Context, in *GetPurchaseRecordRequest, opts ...grpc.CallOption) (*GetPurchaseRecordResponse, error)
	JudgeBargain(ctx context.Context, in *JudgeBargainRequest, opts ...grpc.CallOption) (*JudgeBargainResponse, error)
	CryptominerFullPurchase(ctx context.Context, in *CryptominerPurchaseRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error)
	PropPurchase(ctx context.Context, in *PropPurchaseRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error)
	CryptominerBargainPurchase(ctx context.Context, in *CryptominerBargainRequest, opts ...grpc.CallOption) (*CryptominerBargainResponse, error)
	AssistorBargain(ctx context.Context, in *AssistorBargainRequest, opts ...grpc.CallOption) (*AssistorBargainResponse, error)
	GetBargainRecord(ctx context.Context, in *GetBargainRecordRequest, opts ...grpc.CallOption) (*GetBargainRecordResponse, error)
	BargainPay(ctx context.Context, in *BargainPayRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error)
	// 外部rpc接口
	JudgeGoodsPurchase(ctx context.Context, in *JudgeGoodsPurchaseRequest, opts ...grpc.CallOption) (*JudgeGoodsPurchaseResponse, error)
	GetUserCryptominerStatus(ctx context.Context, in *GetUserCryptominerStatusRequest, opts ...grpc.CallOption) (*GetUserCryptominerStatusResponse, error)
	GetUserPropStatus(ctx context.Context, in *GetUserPropStatusRequest, opts ...grpc.CallOption) (*GetUserPropStatusResponse, error)
	ActivateCryptominer(ctx context.Context, in *ActivateCryptominerRequest, opts ...grpc.CallOption) (*ActivateCryptominerResponse, error)
}

type blockClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockClient(cc grpc.ClientConnInterface) BlockClient {
	return &blockClient{cc}
}

func (c *blockClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Block_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockClient) CreateCryptominer(ctx context.Context, in *CreateCryptominerRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error) {
	out := new(IsSuccessResponse)
	err := c.cc.Invoke(ctx, Block_CreateCryptominer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockClient) CreateProp(ctx context.Context, in *CreatePropRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error) {
	out := new(IsSuccessResponse)
	err := c.cc.Invoke(ctx, Block_CreateProp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockClient) AdminGoodList(ctx context.Context, in *AdminGoodListRequest, opts ...grpc.CallOption) (*AdminGoodListResponse, error) {
	out := new(AdminGoodListResponse)
	err := c.cc.Invoke(ctx, Block_AdminGoodList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockClient) StartGood(ctx context.Context, in *StartGoodRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error) {
	out := new(IsSuccessResponse)
	err := c.cc.Invoke(ctx, Block_StartGood_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockClient) CreateActivity(ctx context.Context, in *CreateActivityRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error) {
	out := new(IsSuccessResponse)
	err := c.cc.Invoke(ctx, Block_CreateActivity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockClient) AdminActivityList(ctx context.Context, in *AdminActivityListRequest, opts ...grpc.CallOption) (*AdminActivityListResponse, error) {
	out := new(AdminActivityListResponse)
	err := c.cc.Invoke(ctx, Block_AdminActivityList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockClient) StartActivity(ctx context.Context, in *StartActivityRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error) {
	out := new(IsSuccessResponse)
	err := c.cc.Invoke(ctx, Block_StartActivity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockClient) GetGoodsList(ctx context.Context, in *GetGoodsListRequest, opts ...grpc.CallOption) (*GetGoodsListResponse, error) {
	out := new(GetGoodsListResponse)
	err := c.cc.Invoke(ctx, Block_GetGoodsList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockClient) GetPurchaseRecord(ctx context.Context, in *GetPurchaseRecordRequest, opts ...grpc.CallOption) (*GetPurchaseRecordResponse, error) {
	out := new(GetPurchaseRecordResponse)
	err := c.cc.Invoke(ctx, Block_GetPurchaseRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockClient) JudgeBargain(ctx context.Context, in *JudgeBargainRequest, opts ...grpc.CallOption) (*JudgeBargainResponse, error) {
	out := new(JudgeBargainResponse)
	err := c.cc.Invoke(ctx, Block_JudgeBargain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockClient) CryptominerFullPurchase(ctx context.Context, in *CryptominerPurchaseRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error) {
	out := new(IsSuccessResponse)
	err := c.cc.Invoke(ctx, Block_CryptominerFullPurchase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockClient) PropPurchase(ctx context.Context, in *PropPurchaseRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error) {
	out := new(IsSuccessResponse)
	err := c.cc.Invoke(ctx, Block_PropPurchase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockClient) CryptominerBargainPurchase(ctx context.Context, in *CryptominerBargainRequest, opts ...grpc.CallOption) (*CryptominerBargainResponse, error) {
	out := new(CryptominerBargainResponse)
	err := c.cc.Invoke(ctx, Block_CryptominerBargainPurchase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockClient) AssistorBargain(ctx context.Context, in *AssistorBargainRequest, opts ...grpc.CallOption) (*AssistorBargainResponse, error) {
	out := new(AssistorBargainResponse)
	err := c.cc.Invoke(ctx, Block_AssistorBargain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockClient) GetBargainRecord(ctx context.Context, in *GetBargainRecordRequest, opts ...grpc.CallOption) (*GetBargainRecordResponse, error) {
	out := new(GetBargainRecordResponse)
	err := c.cc.Invoke(ctx, Block_GetBargainRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockClient) BargainPay(ctx context.Context, in *BargainPayRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error) {
	out := new(IsSuccessResponse)
	err := c.cc.Invoke(ctx, Block_BargainPay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockClient) JudgeGoodsPurchase(ctx context.Context, in *JudgeGoodsPurchaseRequest, opts ...grpc.CallOption) (*JudgeGoodsPurchaseResponse, error) {
	out := new(JudgeGoodsPurchaseResponse)
	err := c.cc.Invoke(ctx, Block_JudgeGoodsPurchase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockClient) GetUserCryptominerStatus(ctx context.Context, in *GetUserCryptominerStatusRequest, opts ...grpc.CallOption) (*GetUserCryptominerStatusResponse, error) {
	out := new(GetUserCryptominerStatusResponse)
	err := c.cc.Invoke(ctx, Block_GetUserCryptominerStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockClient) GetUserPropStatus(ctx context.Context, in *GetUserPropStatusRequest, opts ...grpc.CallOption) (*GetUserPropStatusResponse, error) {
	out := new(GetUserPropStatusResponse)
	err := c.cc.Invoke(ctx, Block_GetUserPropStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockClient) ActivateCryptominer(ctx context.Context, in *ActivateCryptominerRequest, opts ...grpc.CallOption) (*ActivateCryptominerResponse, error) {
	out := new(ActivateCryptominerResponse)
	err := c.cc.Invoke(ctx, Block_ActivateCryptominer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockServer is the server API for Block service.
// All implementations must embed UnimplementedBlockServer
// for forward compatibility
type BlockServer interface {
	// 管理后台接口
	Ping(context.Context, *Request) (*Response, error)
	CreateCryptominer(context.Context, *CreateCryptominerRequest) (*IsSuccessResponse, error)
	CreateProp(context.Context, *CreatePropRequest) (*IsSuccessResponse, error)
	AdminGoodList(context.Context, *AdminGoodListRequest) (*AdminGoodListResponse, error)
	StartGood(context.Context, *StartGoodRequest) (*IsSuccessResponse, error)
	CreateActivity(context.Context, *CreateActivityRequest) (*IsSuccessResponse, error)
	AdminActivityList(context.Context, *AdminActivityListRequest) (*AdminActivityListResponse, error)
	StartActivity(context.Context, *StartActivityRequest) (*IsSuccessResponse, error)
	// PC接口
	GetGoodsList(context.Context, *GetGoodsListRequest) (*GetGoodsListResponse, error)
	GetPurchaseRecord(context.Context, *GetPurchaseRecordRequest) (*GetPurchaseRecordResponse, error)
	JudgeBargain(context.Context, *JudgeBargainRequest) (*JudgeBargainResponse, error)
	CryptominerFullPurchase(context.Context, *CryptominerPurchaseRequest) (*IsSuccessResponse, error)
	PropPurchase(context.Context, *PropPurchaseRequest) (*IsSuccessResponse, error)
	CryptominerBargainPurchase(context.Context, *CryptominerBargainRequest) (*CryptominerBargainResponse, error)
	AssistorBargain(context.Context, *AssistorBargainRequest) (*AssistorBargainResponse, error)
	GetBargainRecord(context.Context, *GetBargainRecordRequest) (*GetBargainRecordResponse, error)
	BargainPay(context.Context, *BargainPayRequest) (*IsSuccessResponse, error)
	// 外部rpc接口
	JudgeGoodsPurchase(context.Context, *JudgeGoodsPurchaseRequest) (*JudgeGoodsPurchaseResponse, error)
	GetUserCryptominerStatus(context.Context, *GetUserCryptominerStatusRequest) (*GetUserCryptominerStatusResponse, error)
	GetUserPropStatus(context.Context, *GetUserPropStatusRequest) (*GetUserPropStatusResponse, error)
	ActivateCryptominer(context.Context, *ActivateCryptominerRequest) (*ActivateCryptominerResponse, error)
	mustEmbedUnimplementedBlockServer()
}

// UnimplementedBlockServer must be embedded to have forward compatible implementations.
type UnimplementedBlockServer struct {
}

func (UnimplementedBlockServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedBlockServer) CreateCryptominer(context.Context, *CreateCryptominerRequest) (*IsSuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCryptominer not implemented")
}
func (UnimplementedBlockServer) CreateProp(context.Context, *CreatePropRequest) (*IsSuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProp not implemented")
}
func (UnimplementedBlockServer) AdminGoodList(context.Context, *AdminGoodListRequest) (*AdminGoodListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGoodList not implemented")
}
func (UnimplementedBlockServer) StartGood(context.Context, *StartGoodRequest) (*IsSuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartGood not implemented")
}
func (UnimplementedBlockServer) CreateActivity(context.Context, *CreateActivityRequest) (*IsSuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateActivity not implemented")
}
func (UnimplementedBlockServer) AdminActivityList(context.Context, *AdminActivityListRequest) (*AdminActivityListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminActivityList not implemented")
}
func (UnimplementedBlockServer) StartActivity(context.Context, *StartActivityRequest) (*IsSuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartActivity not implemented")
}
func (UnimplementedBlockServer) GetGoodsList(context.Context, *GetGoodsListRequest) (*GetGoodsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodsList not implemented")
}
func (UnimplementedBlockServer) GetPurchaseRecord(context.Context, *GetPurchaseRecordRequest) (*GetPurchaseRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPurchaseRecord not implemented")
}
func (UnimplementedBlockServer) JudgeBargain(context.Context, *JudgeBargainRequest) (*JudgeBargainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JudgeBargain not implemented")
}
func (UnimplementedBlockServer) CryptominerFullPurchase(context.Context, *CryptominerPurchaseRequest) (*IsSuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CryptominerFullPurchase not implemented")
}
func (UnimplementedBlockServer) PropPurchase(context.Context, *PropPurchaseRequest) (*IsSuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PropPurchase not implemented")
}
func (UnimplementedBlockServer) CryptominerBargainPurchase(context.Context, *CryptominerBargainRequest) (*CryptominerBargainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CryptominerBargainPurchase not implemented")
}
func (UnimplementedBlockServer) AssistorBargain(context.Context, *AssistorBargainRequest) (*AssistorBargainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssistorBargain not implemented")
}
func (UnimplementedBlockServer) GetBargainRecord(context.Context, *GetBargainRecordRequest) (*GetBargainRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBargainRecord not implemented")
}
func (UnimplementedBlockServer) BargainPay(context.Context, *BargainPayRequest) (*IsSuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BargainPay not implemented")
}
func (UnimplementedBlockServer) JudgeGoodsPurchase(context.Context, *JudgeGoodsPurchaseRequest) (*JudgeGoodsPurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JudgeGoodsPurchase not implemented")
}
func (UnimplementedBlockServer) GetUserCryptominerStatus(context.Context, *GetUserCryptominerStatusRequest) (*GetUserCryptominerStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCryptominerStatus not implemented")
}
func (UnimplementedBlockServer) GetUserPropStatus(context.Context, *GetUserPropStatusRequest) (*GetUserPropStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPropStatus not implemented")
}
func (UnimplementedBlockServer) ActivateCryptominer(context.Context, *ActivateCryptominerRequest) (*ActivateCryptominerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateCryptominer not implemented")
}
func (UnimplementedBlockServer) mustEmbedUnimplementedBlockServer() {}

// UnsafeBlockServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockServer will
// result in compilation errors.
type UnsafeBlockServer interface {
	mustEmbedUnimplementedBlockServer()
}

func RegisterBlockServer(s grpc.ServiceRegistrar, srv BlockServer) {
	s.RegisterService(&Block_ServiceDesc, srv)
}

func _Block_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Block_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Block_CreateCryptominer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCryptominerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).CreateCryptominer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Block_CreateCryptominer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).CreateCryptominer(ctx, req.(*CreateCryptominerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Block_CreateProp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).CreateProp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Block_CreateProp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).CreateProp(ctx, req.(*CreatePropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Block_AdminGoodList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGoodListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).AdminGoodList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Block_AdminGoodList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).AdminGoodList(ctx, req.(*AdminGoodListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Block_StartGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).StartGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Block_StartGood_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).StartGood(ctx, req.(*StartGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Block_CreateActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).CreateActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Block_CreateActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).CreateActivity(ctx, req.(*CreateActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Block_AdminActivityList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminActivityListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).AdminActivityList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Block_AdminActivityList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).AdminActivityList(ctx, req.(*AdminActivityListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Block_StartActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).StartActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Block_StartActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).StartActivity(ctx, req.(*StartActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Block_GetGoodsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).GetGoodsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Block_GetGoodsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).GetGoodsList(ctx, req.(*GetGoodsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Block_GetPurchaseRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPurchaseRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).GetPurchaseRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Block_GetPurchaseRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).GetPurchaseRecord(ctx, req.(*GetPurchaseRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Block_JudgeBargain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JudgeBargainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).JudgeBargain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Block_JudgeBargain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).JudgeBargain(ctx, req.(*JudgeBargainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Block_CryptominerFullPurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptominerPurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).CryptominerFullPurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Block_CryptominerFullPurchase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).CryptominerFullPurchase(ctx, req.(*CryptominerPurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Block_PropPurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropPurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).PropPurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Block_PropPurchase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).PropPurchase(ctx, req.(*PropPurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Block_CryptominerBargainPurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptominerBargainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).CryptominerBargainPurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Block_CryptominerBargainPurchase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).CryptominerBargainPurchase(ctx, req.(*CryptominerBargainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Block_AssistorBargain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssistorBargainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).AssistorBargain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Block_AssistorBargain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).AssistorBargain(ctx, req.(*AssistorBargainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Block_GetBargainRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBargainRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).GetBargainRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Block_GetBargainRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).GetBargainRecord(ctx, req.(*GetBargainRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Block_BargainPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BargainPayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).BargainPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Block_BargainPay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).BargainPay(ctx, req.(*BargainPayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Block_JudgeGoodsPurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JudgeGoodsPurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).JudgeGoodsPurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Block_JudgeGoodsPurchase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).JudgeGoodsPurchase(ctx, req.(*JudgeGoodsPurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Block_GetUserCryptominerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCryptominerStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).GetUserCryptominerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Block_GetUserCryptominerStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).GetUserCryptominerStatus(ctx, req.(*GetUserCryptominerStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Block_GetUserPropStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPropStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).GetUserPropStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Block_GetUserPropStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).GetUserPropStatus(ctx, req.(*GetUserPropStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Block_ActivateCryptominer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateCryptominerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).ActivateCryptominer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Block_ActivateCryptominer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).ActivateCryptominer(ctx, req.(*ActivateCryptominerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Block_ServiceDesc is the grpc.ServiceDesc for Block service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Block_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "block.Block",
	HandlerType: (*BlockServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Block_Ping_Handler,
		},
		{
			MethodName: "CreateCryptominer",
			Handler:    _Block_CreateCryptominer_Handler,
		},
		{
			MethodName: "CreateProp",
			Handler:    _Block_CreateProp_Handler,
		},
		{
			MethodName: "AdminGoodList",
			Handler:    _Block_AdminGoodList_Handler,
		},
		{
			MethodName: "StartGood",
			Handler:    _Block_StartGood_Handler,
		},
		{
			MethodName: "CreateActivity",
			Handler:    _Block_CreateActivity_Handler,
		},
		{
			MethodName: "AdminActivityList",
			Handler:    _Block_AdminActivityList_Handler,
		},
		{
			MethodName: "StartActivity",
			Handler:    _Block_StartActivity_Handler,
		},
		{
			MethodName: "GetGoodsList",
			Handler:    _Block_GetGoodsList_Handler,
		},
		{
			MethodName: "GetPurchaseRecord",
			Handler:    _Block_GetPurchaseRecord_Handler,
		},
		{
			MethodName: "JudgeBargain",
			Handler:    _Block_JudgeBargain_Handler,
		},
		{
			MethodName: "CryptominerFullPurchase",
			Handler:    _Block_CryptominerFullPurchase_Handler,
		},
		{
			MethodName: "PropPurchase",
			Handler:    _Block_PropPurchase_Handler,
		},
		{
			MethodName: "CryptominerBargainPurchase",
			Handler:    _Block_CryptominerBargainPurchase_Handler,
		},
		{
			MethodName: "AssistorBargain",
			Handler:    _Block_AssistorBargain_Handler,
		},
		{
			MethodName: "GetBargainRecord",
			Handler:    _Block_GetBargainRecord_Handler,
		},
		{
			MethodName: "BargainPay",
			Handler:    _Block_BargainPay_Handler,
		},
		{
			MethodName: "JudgeGoodsPurchase",
			Handler:    _Block_JudgeGoodsPurchase_Handler,
		},
		{
			MethodName: "GetUserCryptominerStatus",
			Handler:    _Block_GetUserCryptominerStatus_Handler,
		},
		{
			MethodName: "GetUserPropStatus",
			Handler:    _Block_GetUserPropStatus_Handler,
		},
		{
			MethodName: "ActivateCryptominer",
			Handler:    _Block_ActivateCryptominer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "block.proto",
}
