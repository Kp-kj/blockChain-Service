// Code generated by goctl. DO NOT EDIT.

package myssql

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	goodsFieldNames          = builder.RawFieldNames(&Goods{})
	goodsRows                = strings.Join(goodsFieldNames, ",")
	goodsRowsExpectAutoSet   = strings.Join(stringx.Remove(goodsFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	goodsRowsWithPlaceHolder = strings.Join(stringx.Remove(goodsFieldNames, "`good_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	goodsModel interface {
		Insert(ctx context.Context, data *Goods) (sql.Result, error)
		FindOne(ctx context.Context, goodId int64) (*Goods, error)
		FindOneByGoodId(ctx context.Context, goodId int64) (*Goods, error)
		Update(ctx context.Context, data *Goods) error
		Delete(ctx context.Context, goodId int64) error
	}

	defaultGoodsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Goods struct {
		GoodId         int64         `db:"good_id"`
		CreatedAt      time.Time     `db:"created_at"`
		UpdatedAt      sql.NullTime  `db:"updated_at"`
		DeletedAt      sql.NullTime  `db:"deleted_at"`
		MallId         int64         `db:"mall_id"`
		GoodName       string        `db:"good_name"`
		GoodPicture    string        `db:"good_picture"`
		GoodPrice      sql.NullInt64 `db:"good_price"`
		GoodDescribe   string        `db:"good_describe"`
		GoodType       string        `db:"good_type"`
		CurrencyType   string        `db:"currency_type"`
		IsBargain      int64         `db:"is_bargain"`
		PurchaseWay    string        `db:"purchase_way"`
		PurchaseTime   sql.NullTime  `db:"purchase_time"`
		OptionalStatus string        `db:"optional_status"`
		GoodStartTime  sql.NullTime  `db:"good_start_time"`
	}
)

func newGoodsModel(conn sqlx.SqlConn) *defaultGoodsModel {
	return &defaultGoodsModel{
		conn:  conn,
		table: "`goods`",
	}
}

func (m *defaultGoodsModel) withSession(session sqlx.Session) *defaultGoodsModel {
	return &defaultGoodsModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`goods`",
	}
}

func (m *defaultGoodsModel) Delete(ctx context.Context, goodId int64) error {
	query := fmt.Sprintf("delete from %s where `good_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, goodId)
	return err
}

func (m *defaultGoodsModel) FindOne(ctx context.Context, goodId int64) (*Goods, error) {
	query := fmt.Sprintf("select %s from %s where `good_id` = ? limit 1", goodsRows, m.table)
	var resp Goods
	err := m.conn.QueryRowCtx(ctx, &resp, query, goodId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGoodsModel) FindOneByGoodId(ctx context.Context, goodId int64) (*Goods, error) {
	var resp Goods
	query := fmt.Sprintf("select %s from %s where `good_id` = ? limit 1", goodsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, goodId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGoodsModel) Insert(ctx context.Context, data *Goods) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, goodsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.GoodId, data.DeletedAt, data.MallId, data.GoodName, data.GoodPicture, data.GoodPrice, data.GoodDescribe, data.GoodType, data.CurrencyType, data.IsBargain, data.PurchaseWay, data.PurchaseTime, data.OptionalStatus, data.GoodStartTime)
	return ret, err
}

func (m *defaultGoodsModel) Update(ctx context.Context, newData *Goods) error {
	query := fmt.Sprintf("update %s set %s where `good_id` = ?", m.table, goodsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.DeletedAt, newData.MallId, newData.GoodName, newData.GoodPicture, newData.GoodPrice, newData.GoodDescribe, newData.GoodType, newData.CurrencyType, newData.IsBargain, newData.PurchaseWay, newData.PurchaseTime, newData.OptionalStatus, newData.GoodStartTime, newData.GoodId)
	return err
}

func (m *defaultGoodsModel) tableName() string {
	return m.table
}
