// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	friendAssistanceFieldNames          = builder.RawFieldNames(&FriendAssistance{})
	friendAssistanceRows                = strings.Join(friendAssistanceFieldNames, ",")
	friendAssistanceRowsExpectAutoSet   = strings.Join(stringx.Remove(friendAssistanceFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	friendAssistanceRowsWithPlaceHolder = strings.Join(stringx.Remove(friendAssistanceFieldNames, "`bargain_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	friendAssistanceModel interface {
		Insert(ctx context.Context, data *FriendAssistance) (sql.Result, error)
		FindOne(ctx context.Context, bargainId int64) (*FriendAssistance, error)
		Update(ctx context.Context, data *FriendAssistance) error
		Delete(ctx context.Context, bargainId int64) error
	}

	defaultFriendAssistanceModel struct {
		conn  sqlx.SqlConn
		table string
	}

	FriendAssistance struct {
		BargainId    int64   `db:"bargain_id"`
		UserId       int64   `db:"user_id"`
		UserName     int64   `db:"user_name"`
		Avatar       int64   `db:"avatar"`
		BargainPrice float64 `db:"bargain_price"`
	}
)

func newFriendAssistanceModel(conn sqlx.SqlConn) *defaultFriendAssistanceModel {
	return &defaultFriendAssistanceModel{
		conn:  conn,
		table: "`friend_assistance`",
	}
}

func (m *defaultFriendAssistanceModel) Delete(ctx context.Context, bargainId int64) error {
	query := fmt.Sprintf("delete from %s where `bargain_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, bargainId)
	return err
}

func (m *defaultFriendAssistanceModel) FindOne(ctx context.Context, bargainId int64) (*FriendAssistance, error) {
	query := fmt.Sprintf("select %s from %s where `bargain_id` = ? limit 1", friendAssistanceRows, m.table)
	var resp FriendAssistance
	err := m.conn.QueryRowCtx(ctx, &resp, query, bargainId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFriendAssistanceModel) Insert(ctx context.Context, data *FriendAssistance) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, friendAssistanceRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.BargainId, data.UserId, data.UserName, data.Avatar, data.BargainPrice)
	return ret, err
}

func (m *defaultFriendAssistanceModel) Update(ctx context.Context, data *FriendAssistance) error {
	query := fmt.Sprintf("update %s set %s where `bargain_id` = ?", m.table, friendAssistanceRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.UserName, data.Avatar, data.BargainPrice, data.BargainId)
	return err
}

func (m *defaultFriendAssistanceModel) tableName() string {
	return m.table
}
