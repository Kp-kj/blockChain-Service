// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	cryptominerFieldNames          = builder.RawFieldNames(&Cryptominer{})
	cryptominerRows                = strings.Join(cryptominerFieldNames, ",")
	cryptominerRowsExpectAutoSet   = strings.Join(stringx.Remove(cryptominerFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	cryptominerRowsWithPlaceHolder = strings.Join(stringx.Remove(cryptominerFieldNames, "`cryptominer_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	cryptominerModel interface {
		Insert(ctx context.Context, data *Cryptominer) (sql.Result, error)
		FindOne(ctx context.Context, cryptominerId int64) (*Cryptominer, error)
		FindOneByCryptominerId(ctx context.Context, cryptominerId int64) (*Cryptominer, error)
		Update(ctx context.Context, data *Cryptominer) error
		Delete(ctx context.Context, cryptominerId int64) error
	}

	defaultCryptominerModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Cryptominer struct {
		CryptominerId        int64          `db:"cryptominer_id"`
		CreatedAt            time.Time      `db:"created_at"`
		UpdatedAt            sql.NullTime   `db:"updated_at"`
		DeletedAt            sql.NullTime   `db:"deleted_at"`
		UserId               sql.NullInt64  `db:"user_id"`
		CryptominerTypeid    int64          `db:"cryptominer_typeid"`
		CryptominerName      string         `db:"cryptominer_name"`
		CryptominerPicture   sql.NullString `db:"cryptominer_picture"`
		CryptominerPrice     int64          `db:"cryptominer_price"`
		CryptominerDescribe  sql.NullString `db:"cryptominer_describe"`
		IsBargain            int64          `db:"is_bargain"`
		PurchaseWay          sql.NullString `db:"purchase_way"`
		PurchaseTime         sql.NullTime   `db:"purchase_time"`
		OptionalStatus       string         `db:"optional_status"`
		CryptominerStartTime sql.NullTime   `db:"cryptominer_start_time"`
		CryptominerDuration  int64      	`db:"cryptominer_duration"`
	}
)

func newCryptominerModel(conn sqlx.SqlConn) *defaultCryptominerModel {
	return &defaultCryptominerModel{
		conn:  conn,
		table: "`cryptominer`",
	}
}

func (m *defaultCryptominerModel) Delete(ctx context.Context, cryptominerId int64) error {
	query := fmt.Sprintf("delete from %s where `cryptominer_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, cryptominerId)
	return err
}

func (m *defaultCryptominerModel) FindOne(ctx context.Context, cryptominerId int64) (*Cryptominer, error) {
	query := fmt.Sprintf("select %s from %s where `cryptominer_id` = ? limit 1", cryptominerRows, m.table)
	var resp Cryptominer
	err := m.conn.QueryRowCtx(ctx, &resp, query, cryptominerId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCryptominerModel) FindOneByCryptominerId(ctx context.Context, cryptominerId int64) (*Cryptominer, error) {
	var resp Cryptominer
	query := fmt.Sprintf("select %s from %s where `cryptominer_id` = ? limit 1", cryptominerRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, cryptominerId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCryptominerModel) Insert(ctx context.Context, data *Cryptominer) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, cryptominerRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CryptominerId, data.DeletedAt, data.UserId, data.CryptominerTypeid, data.CryptominerName, data.CryptominerPicture, data.CryptominerPrice, data.CryptominerDescribe, data.IsBargain, data.PurchaseWay, data.PurchaseTime, data.OptionalStatus, data.CryptominerStartTime, data.CryptominerDuration)
	return ret, err
}

func (m *defaultCryptominerModel) Update(ctx context.Context, newData *Cryptominer) error {
	query := fmt.Sprintf("update %s set %s where `cryptominer_id` = ?", m.table, cryptominerRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.DeletedAt, newData.UserId, newData.CryptominerTypeid, newData.CryptominerName, newData.CryptominerPicture, newData.CryptominerPrice, newData.CryptominerDescribe, newData.IsBargain, newData.PurchaseWay, newData.PurchaseTime, newData.OptionalStatus, newData.CryptominerStartTime, newData.CryptominerDuration, newData.CryptominerId)
	return err
}

func (m *defaultCryptominerModel) tableName() string {
	return m.table
}
