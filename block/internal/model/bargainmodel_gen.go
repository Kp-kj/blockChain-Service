// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bargainFieldNames          = builder.RawFieldNames(&Bargain{})
	bargainRows                = strings.Join(bargainFieldNames, ",")
	bargainRowsExpectAutoSet   = strings.Join(stringx.Remove(bargainFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	bargainRowsWithPlaceHolder = strings.Join(stringx.Remove(bargainFieldNames, "`bargain_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	bargainModel interface {
		Insert(ctx context.Context, data *Bargain) (sql.Result, error)
		FindOne(ctx context.Context, bargainId int64) (*Bargain, error)
		Update(ctx context.Context, data *Bargain) error
		Delete(ctx context.Context, bargainId int64) error
	}

	defaultBargainModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Bargain struct {
		BargainId         int64        `db:"bargain_id"`
		CryptominerId     int64        `db:"cryptominer_id"`
		CryptominerPrice  int64        `db:"cryptominer_price"`
		RemainingPrice    float64      `db:"remaining_price"`
		ActivityStartTime time.Time    `db:"activity_start_time"`
		ActivityEndTime   sql.NullTime `db:"activity_end_time"`
	}
)

func newBargainModel(conn sqlx.SqlConn) *defaultBargainModel {
	return &defaultBargainModel{
		conn:  conn,
		table: "`bargain`",
	}
}

func (m *defaultBargainModel) Delete(ctx context.Context, bargainId int64) error {
	query := fmt.Sprintf("delete from %s where `bargain_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, bargainId)
	return err
}

func (m *defaultBargainModel) FindOne(ctx context.Context, bargainId int64) (*Bargain, error) {
	query := fmt.Sprintf("select %s from %s where `bargain_id` = ? limit 1", bargainRows, m.table)
	var resp Bargain
	err := m.conn.QueryRowCtx(ctx, &resp, query, bargainId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBargainModel) Insert(ctx context.Context, data *Bargain) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, bargainRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.BargainId, data.CryptominerId, data.CryptominerPrice, data.RemainingPrice, data.ActivityStartTime, data.ActivityEndTime)
	return ret, err
}

func (m *defaultBargainModel) Update(ctx context.Context, data *Bargain) error {
	query := fmt.Sprintf("update %s set %s where `bargain_id` = ?", m.table, bargainRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CryptominerId, data.CryptominerPrice, data.RemainingPrice, data.ActivityStartTime, data.ActivityEndTime, data.BargainId)
	return err
}

func (m *defaultBargainModel) tableName() string {
	return m.table
}
