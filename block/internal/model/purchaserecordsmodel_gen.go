// Code generated by goctl. DO NOT EDIT.

package myssql

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	purchaseRecordsFieldNames          = builder.RawFieldNames(&PurchaseRecords{})
	purchaseRecordsRows                = strings.Join(purchaseRecordsFieldNames, ",")
	purchaseRecordsRowsExpectAutoSet   = strings.Join(stringx.Remove(purchaseRecordsFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	purchaseRecordsRowsWithPlaceHolder = strings.Join(stringx.Remove(purchaseRecordsFieldNames, "`purchase_record_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	purchaseRecordsModel interface {
		Insert(ctx context.Context, data *PurchaseRecords) (sql.Result, error)
		FindOne(ctx context.Context, purchaseRecordId int64) (*PurchaseRecords, error)
		FindOneByPurchaseRecordId(ctx context.Context, purchaseRecordId int64) (*PurchaseRecords, error)
		Update(ctx context.Context, data *PurchaseRecords) error
		Delete(ctx context.Context, purchaseRecordId int64) error
	}

	defaultPurchaseRecordsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	PurchaseRecords struct {
		PurchaseRecordId int64        `db:"purchase_record_id"`
		CreatedAt        time.Time    `db:"created_at"`
		UpdatedAt        sql.NullTime `db:"updated_at"`
		DeletedAt        sql.NullTime `db:"deleted_at"`
		MallId           int64        `db:"mall_id"`
		GoodName         string       `db:"good_name"`
		GoodPicture      string       `db:"good_picture"`
		PurchaseWay      string       `db:"purchase_way"`
		GoodQuantity     int64        `db:"good_quantity"`
		PurchaseTime     time.Time    `db:"purchase_time"`
		PurchasePrice    int64        `db:"purchase_price"`
		CurrencyType     string       `db:"currency_type"`
	}
)

func newPurchaseRecordsModel(conn sqlx.SqlConn) *defaultPurchaseRecordsModel {
	return &defaultPurchaseRecordsModel{
		conn:  conn,
		table: "`purchase_records`",
	}
}

func (m *defaultPurchaseRecordsModel) withSession(session sqlx.Session) *defaultPurchaseRecordsModel {
	return &defaultPurchaseRecordsModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`purchase_records`",
	}
}

func (m *defaultPurchaseRecordsModel) Delete(ctx context.Context, purchaseRecordId int64) error {
	query := fmt.Sprintf("delete from %s where `purchase_record_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, purchaseRecordId)
	return err
}

func (m *defaultPurchaseRecordsModel) FindOne(ctx context.Context, purchaseRecordId int64) (*PurchaseRecords, error) {
	query := fmt.Sprintf("select %s from %s where `purchase_record_id` = ? limit 1", purchaseRecordsRows, m.table)
	var resp PurchaseRecords
	err := m.conn.QueryRowCtx(ctx, &resp, query, purchaseRecordId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPurchaseRecordsModel) FindOneByPurchaseRecordId(ctx context.Context, purchaseRecordId int64) (*PurchaseRecords, error) {
	var resp PurchaseRecords
	query := fmt.Sprintf("select %s from %s where `purchase_record_id` = ? limit 1", purchaseRecordsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, purchaseRecordId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPurchaseRecordsModel) Insert(ctx context.Context, data *PurchaseRecords) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, purchaseRecordsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.PurchaseRecordId, data.DeletedAt, data.MallId, data.GoodName, data.GoodPicture, data.PurchaseWay, data.GoodQuantity, data.PurchaseTime, data.PurchasePrice, data.CurrencyType)
	return ret, err
}

func (m *defaultPurchaseRecordsModel) Update(ctx context.Context, newData *PurchaseRecords) error {
	query := fmt.Sprintf("update %s set %s where `purchase_record_id` = ?", m.table, purchaseRecordsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.DeletedAt, newData.MallId, newData.GoodName, newData.GoodPicture, newData.PurchaseWay, newData.GoodQuantity, newData.PurchaseTime, newData.PurchasePrice, newData.CurrencyType, newData.PurchaseRecordId)
	return err
}

func (m *defaultPurchaseRecordsModel) tableName() string {
	return m.table
}
