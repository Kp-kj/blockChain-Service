// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bargainRuleFieldNames          = builder.RawFieldNames(&BargainRule{})
	bargainRuleRows                = strings.Join(bargainRuleFieldNames, ",")
	bargainRuleRowsExpectAutoSet   = strings.Join(stringx.Remove(bargainRuleFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	bargainRuleRowsWithPlaceHolder = strings.Join(stringx.Remove(bargainRuleFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	bargainRuleModel interface {
		Insert(ctx context.Context, data *BargainRule) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BargainRule, error)
		Update(ctx context.Context, data *BargainRule) error
		Delete(ctx context.Context, id int64) error
		FindTheRule(ctx context.Context) (*BargainRule, error)
	}

	defaultBargainRuleModel struct {
		conn  sqlx.SqlConn
		table string
	}

	BargainRule struct {
		Id          int64  `db:"id"`
		BargainRule string `db:"bargain_rule"`
	}
)

func newBargainRuleModel(conn sqlx.SqlConn) *defaultBargainRuleModel {
	return &defaultBargainRuleModel{
		conn:  conn,
		table: "`bargain_rule`",
	}
}

func (m *defaultBargainRuleModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultBargainRuleModel) FindOne(ctx context.Context, id int64) (*BargainRule, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bargainRuleRows, m.table)
	var resp BargainRule
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBargainRuleModel) Insert(ctx context.Context, data *BargainRule) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, bargainRuleRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.BargainRule)
	return ret, err
}

func (m *defaultBargainRuleModel) Update(ctx context.Context, data *BargainRule) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, bargainRuleRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.BargainRule, data.Id)
	return err
}

func (m *defaultBargainRuleModel) FindTheRule(ctx context.Context) (*BargainRule, error) {
	query := fmt.Sprintf("select %s from %s  limit 1", bargainRuleRows, m.table)
	var resp BargainRule
	err := m.conn.QueryRowCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBargainRuleModel) tableName() string {
	return m.table
}
