// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	manageCryptominerFieldNames          = builder.RawFieldNames(&ManageCryptominer{})
	manageCryptominerRows                = strings.Join(manageCryptominerFieldNames, ",")
	manageCryptominerRowsExpectAutoSet   = strings.Join(stringx.Remove(manageCryptominerFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	manageCryptominerRowsWithPlaceHolder = strings.Join(stringx.Remove(manageCryptominerFieldNames, "`cryptominer_typeid`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	manageCryptominerModel interface {
		Insert(ctx context.Context, data *ManageCryptominer) (sql.Result, error)
		FindOne(ctx context.Context, cryptominerTypeid int64) (*ManageCryptominer, error)
		Update(ctx context.Context, data *ManageCryptominer) error
		Delete(ctx context.Context, cryptominerTypeid int64) error
		SelectCryptominer(ctx context.Context) ([]*ManageCryptominer, error)
		SelectAllCryptominer(ctx context.Context) ([]*ManageCryptominer, error)
		FindOneByCryptominerName(ctx context.Context, cryptominerName string) (*ManageCryptominer, error)
	}

	defaultManageCryptominerModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ManageCryptominer struct {
		CryptominerTypeid   int64          `db:"cryptominer_typeid"`
		Id                  int64          `db:"id"`
		CreatedAt           time.Time      `db:"created_at"`
		UpdatedAt           sql.NullTime   `db:"updated_at"`
		DeletedAt           sql.NullTime   `db:"deleted_at"`
		AdminuserId         int64          `db:"adminuser_id"`
		CryptominerName     string         `db:"cryptominer_name"`
		CryptominerPicture  sql.NullString `db:"cryptominer_picture"`
		CryptominerDescribe sql.NullString `db:"cryptominer_describe"`
		CryptominerPrice    int64          `db:"cryptominer_price"`
		CryptominerDuration int64          `db:"cryptominer_duration"`
		CryptominerPower    int64          `db:"cryptominer_power"`
		PaymentWay          string         `db:"payment_way"`
		GoodStatus          string         `db:"good_status"`
		GoodType            string         `db:"good_type"`
	}
)

func newManageCryptominerModel(conn sqlx.SqlConn) *defaultManageCryptominerModel {
	return &defaultManageCryptominerModel{
		conn:  conn,
		table: "`manage_cryptominer`",
	}
}

func (m *defaultManageCryptominerModel) Delete(ctx context.Context, cryptominerTypeid int64) error {
	query := fmt.Sprintf("delete from %s where `cryptominer_typeid` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, cryptominerTypeid)
	return err
}

func (m *defaultManageCryptominerModel) FindOne(ctx context.Context, cryptominerTypeid int64) (*ManageCryptominer, error) {
	query := fmt.Sprintf("select %s from %s where `cryptominer_typeid` = ? limit 1", manageCryptominerRows, m.table)
	var resp ManageCryptominer
	err := m.conn.QueryRowCtx(ctx, &resp, query, cryptominerTypeid)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultManageCryptominerModel) Insert(ctx context.Context, data *ManageCryptominer) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, manageCryptominerRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CryptominerTypeid, data.Id, data.DeletedAt, data.AdminuserId, data.CryptominerName, data.CryptominerPicture, data.CryptominerDescribe, data.CryptominerPrice, data.CryptominerDuration, data.CryptominerPower, data.PaymentWay, data.GoodStatus, data.GoodType)
	return ret, err
}

func (m *defaultManageCryptominerModel) Update(ctx context.Context, newData *ManageCryptominer) error {
	query := fmt.Sprintf("update %s set %s where `cryptominer_typeid` = ?", m.table, manageCryptominerRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Id, newData.DeletedAt, newData.AdminuserId, newData.CryptominerName, newData.CryptominerPicture, newData.CryptominerDescribe, newData.CryptominerPrice, newData.CryptominerDuration, newData.CryptominerPower, newData.PaymentWay, newData.GoodStatus, newData.GoodType, newData.CryptominerTypeid)
	return err
}

func (m *defaultManageCryptominerModel) SelectCryptominer(ctx context.Context) ([]*ManageCryptominer, error) {
	query := fmt.Sprintf("select %s from %s where `good_status` = ? ", manageCryptominerRows, m.table)
	var resp []*ManageCryptominer
	err := m.conn.QueryRowsCtx(ctx, &resp, query,"1")
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultManageCryptominerModel) SelectAllCryptominer(ctx context.Context) ([]*ManageCryptominer, error) {
	query := fmt.Sprintf("select %s from %s", manageCryptominerRows, m.table)
	var resp []*ManageCryptominer
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultManageCryptominerModel) FindOneByCryptominerName(ctx context.Context, cryptominerName string) (*ManageCryptominer, error) {
	query := fmt.Sprintf("select %s from %s where `cryptominer_name` = ? limit 1", manageCryptominerRows, m.table)
	var resp ManageCryptominer
	err := m.conn.QueryRowCtx(ctx, &resp, query, cryptominerName)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultManageCryptominerModel) tableName() string {
	return m.table
}
