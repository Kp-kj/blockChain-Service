// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	chainConfigFieldNames          = builder.RawFieldNames(&ChainConfig{})
	chainConfigRows                = strings.Join(chainConfigFieldNames, ",")
	chainConfigRowsExpectAutoSet   = strings.Join(stringx.Remove(chainConfigFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	chainConfigRowsWithPlaceHolder = strings.Join(stringx.Remove(chainConfigFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	chainConfigModel interface {
		Insert(ctx context.Context, data *ChainConfig) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ChainConfig, error)
		Update(ctx context.Context, data *ChainConfig) error
		Delete(ctx context.Context, id int64) error
	}

	defaultChainConfigModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ChainConfig struct {
		Id                int64     `db:"id"`
		Name              string    `db:"name"`
		ChainId           int64     `db:"chain_id"`
		ContractAdMachine string    `db:"contract_ad_machine"`
		ChainBlock        string    `db:"chain_block"`
		FromBlock         string    `db:"from_block"`
		UpdateDate        time.Time `db:"update_date"`
	}
)

func newChainConfigModel(conn sqlx.SqlConn) *defaultChainConfigModel {
	return &defaultChainConfigModel{
		conn:  conn,
		table: "`chain_config`",
	}
}

func (m *defaultChainConfigModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultChainConfigModel) FindOne(ctx context.Context, id int64) (*ChainConfig, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", chainConfigRows, m.table)
	var resp ChainConfig
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultChainConfigModel) Insert(ctx context.Context, data *ChainConfig) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, chainConfigRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.ChainId, data.ContractAdMachine, data.ChainBlock, data.FromBlock, data.UpdateDate)
	return ret, err
}

func (m *defaultChainConfigModel) Update(ctx context.Context, data *ChainConfig) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, chainConfigRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.ChainId, data.ContractAdMachine, data.ChainBlock, data.FromBlock, data.UpdateDate, data.Id)
	return err
}

func (m *defaultChainConfigModel) tableName() string {
	return m.table
}
