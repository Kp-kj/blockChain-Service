// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	walletsFieldNames          = builder.RawFieldNames(&Wallets{})
	walletsRows                = strings.Join(walletsFieldNames, ",")
	walletsRowsExpectAutoSet   = strings.Join(stringx.Remove(walletsFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	walletsRowsWithPlaceHolder = strings.Join(stringx.Remove(walletsFieldNames, "`user_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	walletsModel interface {
		Insert(ctx context.Context, data *Wallets) (sql.Result, error)
		FindOne(ctx context.Context, userId int64) (*Wallets, error)
		Update(ctx context.Context, data *Wallets) error
		Delete(ctx context.Context, userId int64) error
	}

	defaultWalletsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Wallets struct {
		UserId             int64   `db:"user_id"`
		HoldingQuantity    float64 `db:"holding_quantity"`
		AvailableQuantity  float64 `db:"available_quantity"`
		FrozenQuantity     float64 `db:"frozen_quantity"`
		AccumulatedReward  float64 `db:"accumulated_reward"`
		AccumulatedExpense float64 `db:"accumulated_expense"`
	}
)

func newWalletsModel(conn sqlx.SqlConn) *defaultWalletsModel {
	return &defaultWalletsModel{
		conn:  conn,
		table: "`wallets`",
	}
}

func (m *defaultWalletsModel) Delete(ctx context.Context, userId int64) error {
	query := fmt.Sprintf("delete from %s where `user_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, userId)
	return err
}

func (m *defaultWalletsModel) FindOne(ctx context.Context, userId int64) (*Wallets, error) {
	query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", walletsRows, m.table)
	var resp Wallets
	err := m.conn.QueryRowCtx(ctx, &resp, query, userId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultWalletsModel) Insert(ctx context.Context, data *Wallets) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, walletsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.HoldingQuantity, data.AvailableQuantity, data.FrozenQuantity, data.AccumulatedReward, data.AccumulatedExpense)
	return ret, err
}

func (m *defaultWalletsModel) Update(ctx context.Context, data *Wallets) error {
	query := fmt.Sprintf("update %s set %s where `user_id` = ?", m.table, walletsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.HoldingQuantity, data.AvailableQuantity, data.FrozenQuantity, data.AccumulatedReward, data.AccumulatedExpense, data.UserId)
	return err
}

func (m *defaultWalletsModel) tableName() string {
	return m.table
}
