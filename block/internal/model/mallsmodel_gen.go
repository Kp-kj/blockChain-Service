// Code generated by goctl. DO NOT EDIT.

package myssql

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	mallsFieldNames          = builder.RawFieldNames(&Malls{})
	mallsRows                = strings.Join(mallsFieldNames, ",")
	mallsRowsExpectAutoSet   = strings.Join(stringx.Remove(mallsFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	mallsRowsWithPlaceHolder = strings.Join(stringx.Remove(mallsFieldNames, "`mall_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	mallsModel interface {
		Insert(ctx context.Context, data *Malls) (sql.Result, error)
		FindOne(ctx context.Context, mallId int64) (*Malls, error)
		FindOneByMallId(ctx context.Context, mallId int64) (*Malls, error)
		Update(ctx context.Context, data *Malls) error
		Delete(ctx context.Context, mallId int64) error
	}

	defaultMallsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Malls struct {
		MallId    int64        `db:"mall_id"`
		CreatedAt time.Time    `db:"created_at"`
		UpdatedAt sql.NullTime `db:"updated_at"`
		DeletedAt sql.NullTime `db:"deleted_at"`
		UserId    int64        `db:"user_id"`
	}
)

func newMallsModel(conn sqlx.SqlConn) *defaultMallsModel {
	return &defaultMallsModel{
		conn:  conn,
		table: "`malls`",
	}
}

func (m *defaultMallsModel) withSession(session sqlx.Session) *defaultMallsModel {
	return &defaultMallsModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`malls`",
	}
}

func (m *defaultMallsModel) Delete(ctx context.Context, mallId int64) error {
	query := fmt.Sprintf("delete from %s where `mall_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, mallId)
	return err
}

func (m *defaultMallsModel) FindOne(ctx context.Context, mallId int64) (*Malls, error) {
	query := fmt.Sprintf("select %s from %s where `mall_id` = ? limit 1", mallsRows, m.table)
	var resp Malls
	err := m.conn.QueryRowCtx(ctx, &resp, query, mallId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMallsModel) FindOneByMallId(ctx context.Context, mallId int64) (*Malls, error) {
	var resp Malls
	query := fmt.Sprintf("select %s from %s where `mall_id` = ? limit 1", mallsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, mallId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMallsModel) Insert(ctx context.Context, data *Malls) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, mallsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.MallId, data.DeletedAt, data.UserId)
	return ret, err
}

func (m *defaultMallsModel) Update(ctx context.Context, newData *Malls) error {
	query := fmt.Sprintf("update %s set %s where `mall_id` = ?", m.table, mallsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.DeletedAt, newData.UserId, newData.MallId)
	return err
}

func (m *defaultMallsModel) tableName() string {
	return m.table
}
