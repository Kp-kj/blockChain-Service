// Code generated by goctl. DO NOT EDIT.

package myssql

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	billDetailsFieldNames          = builder.RawFieldNames(&BillDetails{})
	billDetailsRows                = strings.Join(billDetailsFieldNames, ",")
	billDetailsRowsExpectAutoSet   = strings.Join(stringx.Remove(billDetailsFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	billDetailsRowsWithPlaceHolder = strings.Join(stringx.Remove(billDetailsFieldNames, "`walletId`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	billDetailsModel interface {
		Insert(ctx context.Context, data *BillDetails) (sql.Result, error)
		FindOne(ctx context.Context, walletId int64) (*BillDetails, error)
		Update(ctx context.Context, data *BillDetails) error
		Delete(ctx context.Context, walletId int64) error
	}

	defaultBillDetailsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	BillDetails struct {
		WalletId    int64     `db:"walletId"`
		GetType     string    `db:"getType"`
		GetTime     time.Time `db:"getTime"`
		GetQuantity float64   `db:"getQuantity"`
	}
)

func newBillDetailsModel(conn sqlx.SqlConn) *defaultBillDetailsModel {
	return &defaultBillDetailsModel{
		conn:  conn,
		table: "`bill_details`",
	}
}

func (m *defaultBillDetailsModel) withSession(session sqlx.Session) *defaultBillDetailsModel {
	return &defaultBillDetailsModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`bill_details`",
	}
}

func (m *defaultBillDetailsModel) Delete(ctx context.Context, walletId int64) error {
	query := fmt.Sprintf("delete from %s where `walletId` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, walletId)
	return err
}

func (m *defaultBillDetailsModel) FindOne(ctx context.Context, walletId int64) (*BillDetails, error) {
	query := fmt.Sprintf("select %s from %s where `walletId` = ? limit 1", billDetailsRows, m.table)
	var resp BillDetails
	err := m.conn.QueryRowCtx(ctx, &resp, query, walletId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBillDetailsModel) Insert(ctx context.Context, data *BillDetails) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, billDetailsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.WalletId, data.GetType, data.GetTime, data.GetQuantity)
	return ret, err
}

func (m *defaultBillDetailsModel) Update(ctx context.Context, data *BillDetails) error {
	query := fmt.Sprintf("update %s set %s where `walletId` = ?", m.table, billDetailsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.GetType, data.GetTime, data.GetQuantity, data.WalletId)
	return err
}

func (m *defaultBillDetailsModel) tableName() string {
	return m.table
}
