// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	managePropFieldNames          = builder.RawFieldNames(&ManageProp{})
	managePropRows                = strings.Join(managePropFieldNames, ",")
	managePropRowsExpectAutoSet   = strings.Join(stringx.Remove(managePropFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	managePropRowsWithPlaceHolder = strings.Join(stringx.Remove(managePropFieldNames, "`prop_typeid`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	managePropModel interface {
		Insert(ctx context.Context, data *ManageProp) (sql.Result, error)
		FindOne(ctx context.Context, propTypeid int64) (*ManageProp, error)
		Update(ctx context.Context, data *ManageProp) error
		Delete(ctx context.Context, propTypeid int64) error
		SelectProp(ctx context.Context) ([]*ManageProp, error)
		SelectAllProp(ctx context.Context) ([]*ManageProp, error)
		FindOneByPropName(ctx context.Context, propName string) (*ManageProp, error)
	}

	defaultManagePropModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ManageProp struct {
		PropTypeid   int64          `db:"prop_typeid"`
		CreatedAt    time.Time      `db:"created_at"`
		UpdatedAt    sql.NullTime   `db:"updated_at"`
		DeletedAt    sql.NullTime   `db:"deleted_at"`
		AdminuserId  int64          `db:"adminuser_id"`
		PropName     string         `db:"prop_name"`
		PropPicture  sql.NullString `db:"prop_picture"`
		PropDescribe sql.NullString `db:"prop_describe"`
		PropPrice    int64          `db:"prop_price"`
		PaymentWay   string         `db:"payment_way"`
		GoodStatus   string         `db:"good_status"`
	}
)

func newManagePropModel(conn sqlx.SqlConn) *defaultManagePropModel {
	return &defaultManagePropModel{
		conn:  conn,
		table: "`manage_prop`",
	}
}

func (m *defaultManagePropModel) Delete(ctx context.Context, propTypeid int64) error {
	query := fmt.Sprintf("delete from %s where `prop_typeid` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, propTypeid)
	return err
}

func (m *defaultManagePropModel) FindOne(ctx context.Context, propTypeid int64) (*ManageProp, error) {
	query := fmt.Sprintf("select %s from %s where `prop_typeid` = ? limit 1", managePropRows, m.table)
	var resp ManageProp
	err := m.conn.QueryRowCtx(ctx, &resp, query, propTypeid)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultManagePropModel) Insert(ctx context.Context, data *ManageProp) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, managePropRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.PropTypeid, data.DeletedAt, data.AdminuserId, data.PropName, data.PropPicture, data.PropDescribe, data.PropPrice, data.PaymentWay, data.GoodStatus)
	return ret, err
}

func (m *defaultManagePropModel) Update(ctx context.Context, data *ManageProp) error {
	query := fmt.Sprintf("update %s set %s where `prop_typeid` = ?", m.table, managePropRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DeletedAt, data.AdminuserId, data.PropName, data.PropPicture, data.PropDescribe, data.PropPrice, data.PaymentWay, data.GoodStatus, data.PropTypeid)
	return err
}

func (m *defaultManagePropModel) SelectProp(ctx context.Context) ([]*ManageProp, error) {
	query := fmt.Sprintf("select %s from %s where `good_status` = ? ", managePropRows, m.table)
	var resp []*ManageProp
	err := m.conn.QueryRowsCtx(ctx, &resp, query,"1")
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultManagePropModel) SelectAllProp(ctx context.Context) ([]*ManageProp, error) {
	query := fmt.Sprintf("select %s from %s", managePropRows, m.table)
	var resp []*ManageProp
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultManagePropModel) FindOneByPropName(ctx context.Context, propName string) (*ManageProp, error) {
	query := fmt.Sprintf("select %s from %s where `prop_name` = ? limit 1", managePropRows, m.table)
	var resp ManageProp
	err := m.conn.QueryRowCtx(ctx, &resp, query, propName)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}


func (m *defaultManagePropModel) tableName() string {
	return m.table
}
